{"ast":null,"code":"import { db } from \"../utils/firebaseConfig\";\nexport const createComment = async (comment, game, currentUser) => {\n  if (currentUser === null) {\n    return;\n  }\n\n  try {\n    await db.collection(\"Comments\").add({\n      author: currentUser.displayName,\n      gameId: game.id,\n      text: comment,\n      profilID: currentUser.uid\n    });\n    console.log(\"createComment OK\");\n    return true;\n  } catch (reason) {\n    console.log(\"createComment Error : \" + reason);\n    return false;\n  }\n};\nexport const updateComment = async (updatedText, comment, currentUser) => {\n  if (currentUser === null) {\n    return;\n  }\n\n  try {\n    await db.collection(\"Comments\").doc(comment.id).set({\n      author: comment.data().author,\n      gameId: comment.data().gameId,\n      profilID: comment.data().profilID,\n      text: updatedText\n    });\n    console.log(\"updateComment OK\");\n    return true;\n  } catch (reason) {\n    console.log(\"updateComment Error : \" + reason);\n    return false;\n  }\n};\nexport const deleteComment = async (comment, currentUser) => {\n  if (currentUser === null) {\n    return;\n  }\n\n  try {\n    await db.collection(\"Comments\").doc(comment.id).delete();\n    console.log(\"deleteComment OK\");\n    return true;\n  } catch (reason) {\n    console.log(\"deleteComment Error : \" + reason);\n    return false;\n  }\n};\nexport const getCommentsForProfil = async profilID => {\n  try {\n    const comments = await db.collection(\"Comments\").where(\"profilID\", \"==\", profilID).get();\n    return comments.docs;\n  } catch (reason) {\n    // gestion d'erreur avec `reason`\n    return [];\n  }\n};","map":{"version":3,"sources":["/Users/benjaminserval/dev/GameV2/gamesite/src/API/CommentrayFirestoreService.jsx"],"names":["db","createComment","comment","game","currentUser","collection","add","author","displayName","gameId","id","text","profilID","uid","console","log","reason","updateComment","updatedText","doc","set","data","deleteComment","delete","getCommentsForProfil","comments","where","get","docs"],"mappings":"AAAA,SAASA,EAAT,QAAmB,yBAAnB;AAEA,OAAO,MAAMC,aAAa,GAAG,OAAOC,OAAP,EAAgBC,IAAhB,EAAsBC,WAAtB,KAAsC;AACjE,MAAIA,WAAW,KAAK,IAApB,EAA0B;AACxB;AACD;;AACD,MAAI;AACF,UAAMJ,EAAE,CACLK,UADG,CACQ,UADR,EAEHC,GAFG,CAEC;AACHC,MAAAA,MAAM,EAAEH,WAAW,CAACI,WADjB;AAEHC,MAAAA,MAAM,EAAEN,IAAI,CAACO,EAFV;AAGHC,MAAAA,IAAI,EAAET,OAHH;AAIHU,MAAAA,QAAQ,EAAER,WAAW,CAACS;AAJnB,KAFD,CAAN;AAQAC,IAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ;AACA,WAAO,IAAP;AACD,GAXD,CAYA,OAAOC,MAAP,EAAe;AACbF,IAAAA,OAAO,CAACC,GAAR,CAAY,2BAA2BC,MAAvC;AACA,WAAO,KAAP;AACD;AACF,CApBM;AAsBP,OAAO,MAAMC,aAAa,GAAG,OAAOC,WAAP,EAAoBhB,OAApB,EAA6BE,WAA7B,KAA6C;AACxE,MAAIA,WAAW,KAAK,IAApB,EAA0B;AACxB;AACD;;AAED,MAAI;AACF,UAAMJ,EAAE,CACLK,UADG,CACQ,UADR,EAEHc,GAFG,CAECjB,OAAO,CAACQ,EAFT,EAGHU,GAHG,CAGC;AACHb,MAAAA,MAAM,EAAEL,OAAO,CAACmB,IAAR,GAAed,MADpB;AAEHE,MAAAA,MAAM,EAAEP,OAAO,CAACmB,IAAR,GAAeZ,MAFpB;AAGHG,MAAAA,QAAQ,EAAEV,OAAO,CAACmB,IAAR,GAAeT,QAHtB;AAIHD,MAAAA,IAAI,EAAEO;AAJH,KAHD,CAAN;AASAJ,IAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ;AACA,WAAO,IAAP;AACD,GAZD,CAaA,OAAOC,MAAP,EAAe;AACbF,IAAAA,OAAO,CAACC,GAAR,CAAY,2BAA2BC,MAAvC;AACA,WAAO,KAAP;AACD;AACF,CAtBM;AAwBP,OAAO,MAAMM,aAAa,GAAG,OAAOpB,OAAP,EAAgBE,WAAhB,KAAgC;AAC3D,MAAIA,WAAW,KAAK,IAApB,EAA0B;AACxB;AACD;;AAED,MAAI;AACF,UAAMJ,EAAE,CACLK,UADG,CACQ,UADR,EAEHc,GAFG,CAECjB,OAAO,CAACQ,EAFT,EAGHa,MAHG,EAAN;AAIAT,IAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ;AACA,WAAO,IAAP;AACD,GAPD,CAQA,OAAOC,MAAP,EAAe;AACbF,IAAAA,OAAO,CAACC,GAAR,CAAY,2BAA2BC,MAAvC;AACA,WAAO,KAAP;AACD;AACF,CAjBM;AAmBP,OAAO,MAAMQ,oBAAoB,GAAG,MAAMZ,QAAN,IAAkB;AACpD,MAAI;AAEF,UAAMa,QAAQ,GAAI,MAAMzB,EAAE,CACvBK,UADqB,CACV,UADU,EAErBqB,KAFqB,CAEf,UAFe,EAEH,IAFG,EAEGd,QAFH,EAGrBe,GAHqB,EAAxB;AAKE,WAAOF,QAAQ,CAACG,IAAhB;AACD,GARH,CASA,OAAOZ,MAAP,EAAe;AACb;AACA,WAAO,EAAP;AACD;AACF,CAdM","sourcesContent":["import { db } from \"../utils/firebaseConfig\";\n\nexport const createComment = async (comment, game, currentUser) => {\n  if (currentUser === null) {\n    return;\n  }\n  try {\n    await db\n      .collection(\"Comments\")\n      .add({\n        author: currentUser.displayName,\n        gameId: game.id,\n        text: comment,\n        profilID: currentUser.uid\n      });\n    console.log(\"createComment OK\");\n    return true;\n  }\n  catch (reason) {\n    console.log(\"createComment Error : \" + reason);\n    return false;\n  }\n};\n\nexport const updateComment = async (updatedText, comment, currentUser) => {\n  if (currentUser === null) {\n    return;\n  }\n\n  try {\n    await db\n      .collection(\"Comments\")\n      .doc(comment.id)\n      .set({\n        author: comment.data().author,\n        gameId: comment.data().gameId,\n        profilID: comment.data().profilID,\n        text: updatedText\n      });\n    console.log(\"updateComment OK\");\n    return true;\n  }\n  catch (reason) {\n    console.log(\"updateComment Error : \" + reason);\n    return false;\n  }\n};\n\nexport const deleteComment = async (comment, currentUser) => {\n  if (currentUser === null) {\n    return;\n  }\n\n  try {\n    await db\n      .collection(\"Comments\")\n      .doc(comment.id)\n      .delete();\n    console.log(\"deleteComment OK\");\n    return true;\n  }\n  catch (reason) {\n    console.log(\"deleteComment Error : \" + reason);\n    return false;\n  }\n};\n\nexport const getCommentsForProfil = async profilID => {\n  try {\n\n    const comments =  await db\n      .collection(\"Comments\")\n      .where(\"profilID\", \"==\", profilID)\n      .get()\n\n      return comments.docs\n    }\n  catch (reason) {\n    // gestion d'erreur avec `reason`\n    return [];\n  } \n};\n"]},"metadata":{},"sourceType":"module"}